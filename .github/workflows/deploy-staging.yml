name: 🚧 Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

# Prevent concurrent staging deployments
concurrency:
  group: staging-deployment
  cancel-in-progress: true

env:
  NODE_VERSION: '18'

jobs:
  # ==========================================
  # STAGING BUILD & DEPLOY
  # ==========================================
  
  build-and-deploy:
    name: 🚧 Build & Deploy Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
      
    outputs:
      deploy_url: ${{ steps.deploy.outputs.url }}
      build_hash: ${{ steps.build.outputs.hash }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🧪 Run tests
        run: npm run test
        
      - name: 🔍 Quick security check
        run: npm audit --audit-level high
        continue-on-error: true
        
      - name: 🏗️ Build for staging
        id: build
        run: |
          npm run build
          echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        env:
          NODE_ENV: development
          NEXT_PUBLIC_SITE_URL: https://staging.borderlessbits.com
          NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.STAGING_GA_MEASUREMENT_ID }}
          NEXT_PUBLIC_EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
          NEXT_PUBLIC_EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
          NEXT_PUBLIC_EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
          
      - name: 🚀 Deploy to Netlify Staging
        id: deploy
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './out'
          production-branch: develop
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Staging deployment ${{ steps.build.outputs.hash }}"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: false
          alias: staging-${{ steps.build.outputs.hash }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

  # ==========================================
  # STAGING VALIDATION
  # ==========================================
  
  validate-staging:
    name: ✅ Validate Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-and-deploy]
    
    steps:
      - name: ⏳ Wait for deployment
        run: sleep 30
        
      - name: 🏥 Health check
        run: |
          MAX_ATTEMPTS=5
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Health check attempt $ATTEMPT of $MAX_ATTEMPTS"
            
            if curl -f -s -o /dev/null -w "%{http_code}" "${{ needs.build-and-deploy.outputs.deploy_url }}" | grep -q "200"; then
              echo "✅ Staging site is healthy"
              break
            fi
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ Staging site health check failed"
              exit 1
            fi
            
            sleep 15
            ATTEMPT=$((ATTEMPT + 1))
          done
          
      - name: 🧪 Smoke tests
        run: |
          # Test critical pages
          curl -f -s "${{ needs.build-and-deploy.outputs.deploy_url }}/" > /dev/null
          curl -f -s "${{ needs.build-and-deploy.outputs.deploy_url }}/contact" > /dev/null
          
          echo "✅ Critical pages are accessible"
          
      - name: 📝 Staging summary
        run: |
          echo "## 🚧 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ needs.build-and-deploy.outputs.deploy_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ needs.build-and-deploy.outputs.build_hash }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Healthy" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # AUTO-PROMOTE TO PRODUCTION
  # ==========================================
  
  auto-promote:
    name: 🚀 Auto-Promote to Production
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build-and-deploy, validate-staging]
    if: success() && github.ref == 'refs/heads/develop' && contains(github.event.head_commit.message, '[auto-promote]')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: 🔄 Merge to main
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout main
          git merge develop --no-ff -m "Auto-promote staging to production

          Commit: ${{ needs.build-and-deploy.outputs.build_hash }}
          Staging URL: ${{ needs.build-and-deploy.outputs.deploy_url }}
          
          [skip ci]"
          git push origin main
          
      - name: 📝 Auto-promote summary
        run: |
          echo "## 🚀 Auto-Promotion Executed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **From**: develop branch" >> $GITHUB_STEP_SUMMARY
          echo "- **To**: main branch" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ needs.build-and-deploy.outputs.build_hash }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production deployment**: Will trigger automatically" >> $GITHUB_STEP_SUMMARY