name: 🔍 Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

# Allow concurrent preview deployments for different PRs
concurrency:
  group: preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  # ==========================================
  # BUILD PREVIEW
  # ==========================================

  build-preview:
    name: 🔍 Build Preview
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      deploy_url: ${{ steps.deploy.outputs.url }}
      build_hash: ${{ steps.build.outputs.hash }}
      pr_number: ${{ github.event.pull_request.number }}

    steps:
      - name: 📥 Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 Run tests
        run: npm run test
        continue-on-error: true

      - name: 🔍 Quick lint check
        run: npm run lint
        continue-on-error: true

      - name: 🏗️ Build preview
        id: build
        run: |
          npm run build
          echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        env:
          NODE_ENV: development
          NEXT_PUBLIC_SITE_URL: https://preview-pr-${{ github.event.pull_request.number }}.netlify.app
          NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.STAGING_GA_MEASUREMENT_ID }}

      - name: 🚀 Deploy to Netlify Preview
        id: deploy
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './out'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Preview for PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}'
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
          alias: preview-pr-${{ github.event.pull_request.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PREVIEW_SITE_ID }}

  # ==========================================
  # LIGHTHOUSE AUDIT FOR PR
  # ==========================================

  lighthouse-audit:
    name: 💡 Lighthouse Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-preview]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: ⏳ Wait for deployment
        run: sleep 30

      - name: 💡 Run Lighthouse audit
        id: lighthouse
        run: |
          npm install -g @lhci/cli@0.12.x

          # Create PR-specific Lighthouse config
          cat > lighthouserc.pr.json << EOF
          {
            "ci": {
              "collect": {
                "url": ["${{ needs.build-preview.outputs.deploy_url }}"],
                "numberOfRuns": 1
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.75}],
                  "categories:accessibility": ["warn", {"minScore": 0.90}],
                  "categories:best-practices": ["warn", {"minScore": 0.85}],
                  "categories:seo": ["warn", {"minScore": 0.90}]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF

          lhci autorun --config=lighthouserc.pr.json || true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}


  # ==========================================
  # PR STATUS UPDATE
  # ==========================================

  update-pr-status:
    name: 📝 Update PR Status
    runs-on: ubuntu-latest
    needs: [build-preview, lighthouse-audit]
    if: always()

    steps:
      - name: 📝 Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const pr_number = ${{ needs.build-preview.outputs.pr_number }};

            // Check job results
            const buildStatus = '${{ needs.build-preview.result }}';
            const lighthouseStatus = '${{ needs.lighthouse-audit.result }}';

            // Create status indicators
            const getStatusIcon = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'skipped': return '⏭️';
                default: return '⚠️';
              }
            };

            const comment = `## 🔍 Preview Deployment Status

            **Preview URL**: ${{ needs.build-preview.outputs.deploy_url }}
            **Commit**: ${{ needs.build-preview.outputs.build_hash }}

            ### Validation Results

            | Check | Status | Details |
            |-------|--------|---------|
            | Build & Deploy | ${getStatusIcon(buildStatus)} | ${buildStatus} |
            | Lighthouse Audit | ${getStatusIcon(lighthouseStatus)} | Performance, A11y, SEO |

            ### Preview Links
            - 🏠 [Home Page](${{ needs.build-preview.outputs.deploy_url }})
            - 📞 [Contact Page](${{ needs.build-preview.outputs.deploy_url }}/contact)

            ---

            ${buildStatus === 'success' ? 
              '✅ **Ready for review!** The preview deployment is live and tested.' : 
              '⚠️ **Issues detected.** Please check the workflow logs and fix any issues before merging.'}

            *This comment will be updated automatically when new commits are pushed.*`;

            // Find existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: pr_number,
            });

            const existingComment = comments.find(comment => 
              comment.body.includes('Preview Deployment Status') && 
              comment.user.login === 'github-actions[bot]'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr_number,
                body: comment
              });
            }

  # ==========================================
  # CLEANUP ON PR CLOSE
  # ==========================================

  cleanup-preview:
    name: 🧹 Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'

    steps:
      - name: 🗑️ Delete preview deployment
        run: |
          echo "Preview deployment for PR #${{ github.event.pull_request.number }} will be automatically cleaned up by Netlify."
          echo "Manual cleanup of artifacts and resources completed."

      - name: 📝 Cleanup summary
        run: |
          echo "## 🧹 Preview Cleanup" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **PR**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Preview deployment cleaned up" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
