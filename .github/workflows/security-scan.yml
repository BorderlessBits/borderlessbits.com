name: 🔒 Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      full_scan:
        description: 'Run comprehensive security scan'
        required: false
        default: true
        type: boolean

# Prevent concurrent security scans
concurrency:
  group: security-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ==========================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ==========================================
  
  dependency-scan:
    name: 📦 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔍 NPM Security Audit
        id: npm_audit
        run: |
          echo "Running NPM security audit..."
          
          # Run audit and capture results
          npm audit --audit-level info --json > audit-results.json || true
          
          # Parse results
          if [ -f "audit-results.json" ]; then
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
            MODERATE=$(jq '.metadata.vulnerabilities.moderate // 0' audit-results.json)
            LOW=$(jq '.metadata.vulnerabilities.low // 0' audit-results.json)
            TOTAL=$(jq '.metadata.vulnerabilities.total // 0' audit-results.json)
            
            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            echo "moderate=$MODERATE" >> $GITHUB_OUTPUT
            echo "low=$LOW" >> $GITHUB_OUTPUT
            echo "total=$TOTAL" >> $GITHUB_OUTPUT
            
            # Create summary
            echo "## 📦 Dependency Audit Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
            echo "| Low | $LOW |" >> $GITHUB_STEP_SUMMARY
            echo "| **Total** | **$TOTAL** |" >> $GITHUB_STEP_SUMMARY
            
            # Exit with error for critical/high vulnerabilities
            if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
              echo "🚨 Critical or high severity vulnerabilities detected!"
              exit 1
            fi
          else
            echo "No audit results generated"
          fi
          
      - name: 🔍 Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 📊 Upload vulnerability artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results-${{ github.sha }}
          path: |
            audit-results.json
            trivy-results.sarif
          retention-days: 30

  # ==========================================
  # SECRETS SCANNING
  # ==========================================
  
  secrets-scan:
    name: 🔐 Secrets Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔍 TruffleHog Secrets Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: 🔍 GitLeaks Secrets Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE || '' }} # Premium license (optional)

  # ==========================================
  # SAST (STATIC APPLICATION SECURITY TESTING)
  # ==========================================
  
  sast-scan:
    name: 🔬 Static Application Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          
      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          
  # ==========================================
  # CONTAINER SECURITY SCANNING
  # ==========================================
  
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.full_scan == 'true' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Build Docker image
        run: |
          docker build -t borderlessbits:security-scan .
          
      - name: 🔍 Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'borderlessbits:security-scan'
          format: 'sarif'
          output: 'container-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: 📤 Upload Container Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'container-results.sarif'

  # ==========================================
  # INFRASTRUCTURE SECURITY SCAN
  # ==========================================
  
  infrastructure-scan:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.full_scan == 'true' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Checkov Infrastructure Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions,secrets
          output_format: sarif
          output_file_path: reports/checkov-results.sarif
          
      - name: 📤 Upload Infrastructure Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/checkov-results.sarif

  # ==========================================
  # SECURITY HEADERS VALIDATION
  # ==========================================
  
  security-headers-scan:
    name: 🛡️ Security Headers Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: 🖥️ Start local server
        run: npx serve out -l 3000 &
        
      - name: ⏳ Wait for server
        run: |
          npm install -g wait-on
          wait-on http://localhost:3000 --timeout 60000
        
      - name: 🛡️ Security Headers Test
        run: |
          echo "Testing security headers..."
          
          # Test multiple pages
          PAGES=("/" "/contact")
          
          for page in "${PAGES[@]}"; do
            echo "Testing $page..."
            
            HEADERS=$(curl -I -s "http://localhost:3000$page" || echo "FAILED")
            
            if [ "$HEADERS" = "FAILED" ]; then
              echo "❌ Failed to fetch headers for $page"
              continue
            fi
            
            echo "Headers for $page:"
            
            # Check required security headers
            CHECKS=(
              "X-Frame-Options"
              "X-XSS-Protection"
              "X-Content-Type-Options"
              "Referrer-Policy"
              "Content-Security-Policy"
            )
            
            MISSING_HEADERS=()
            
            for header in "${CHECKS[@]}"; do
              if echo "$HEADERS" | grep -qi "$header"; then
                echo "✅ $header: Present"
              else
                echo "❌ $header: Missing"
                MISSING_HEADERS+=("$header")
              fi
            done
            
            if [ ${#MISSING_HEADERS[@]} -ne 0 ]; then
              echo "⚠️ Missing security headers for $page: ${MISSING_HEADERS[*]}"
            fi
            
            echo ""
          done
          
      - name: 🔍 OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          allow_issue_writing: false

  # ==========================================
  # DEPENDENCY LICENSE SCANNING
  # ==========================================
  
  license-scan:
    name: 📜 License Compliance Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 📜 License check
        run: |
          echo "Checking dependency licenses..."
          
          # Install license checker
          npm install -g license-checker
          
          # Generate license report
          license-checker --json --out licenses.json
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES=("GPL-3.0" "AGPL-3.0" "LGPL-3.0")
          
          if [ -f "licenses.json" ]; then
            echo "## 📜 License Compliance Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            for license in "${PROBLEMATIC_LICENSES[@]}"; do
              COUNT=$(jq -r "to_entries | map(select(.value.licenses | type == \"string\" and contains(\"$license\"))) | length" licenses.json)
              
              if [ "$COUNT" -gt 0 ]; then
                echo "⚠️ Found $COUNT packages with $license license"
                echo "- **$license**: $COUNT packages" >> $GITHUB_STEP_SUMMARY
              else
                echo "✅ No $license licenses found"
              fi
            done
            
            TOTAL_PACKAGES=$(jq -r "to_entries | length" licenses.json)
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Total packages scanned**: $TOTAL_PACKAGES" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: 📤 Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report-${{ github.sha }}
          path: licenses.json
          retention-days: 30

  # ==========================================
  # SECURITY REPORT AGGREGATION
  # ==========================================
  
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, secrets-scan, sast-scan, security-headers-scan, license-scan]
    if: always()
    
    steps:
      - name: 📊 Aggregate security results
        id: aggregate
        run: |
          echo "Aggregating security scan results..."
          
          # Initialize counters
          CRITICAL_ISSUES=0
          HIGH_ISSUES=0
          MODERATE_ISSUES=0
          TOTAL_ISSUES=0
          
          # Check dependency scan results
          if [ "${{ needs.dependency-scan.outputs.critical }}" != "" ]; then
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + ${{ needs.dependency-scan.outputs.critical }}))
            HIGH_ISSUES=$((HIGH_ISSUES + ${{ needs.dependency-scan.outputs.high }}))
            MODERATE_ISSUES=$((MODERATE_ISSUES + ${{ needs.dependency-scan.outputs.moderate }}))
          fi
          
          TOTAL_ISSUES=$((CRITICAL_ISSUES + HIGH_ISSUES + MODERATE_ISSUES))
          
          echo "critical=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          echo "high=$HIGH_ISSUES" >> $GITHUB_OUTPUT
          echo "moderate=$MODERATE_ISSUES" >> $GITHUB_OUTPUT
          echo "total=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
          
          # Determine overall security status
          if [ $CRITICAL_ISSUES -gt 0 ]; then
            echo "status=critical" >> $GITHUB_OUTPUT
            echo "message=Critical security vulnerabilities found" >> $GITHUB_OUTPUT
          elif [ $HIGH_ISSUES -gt 0 ]; then
            echo "status=high" >> $GITHUB_OUTPUT
            echo "message=High severity security issues found" >> $GITHUB_OUTPUT
          elif [ $MODERATE_ISSUES -gt 0 ]; then
            echo "status=moderate" >> $GITHUB_OUTPUT
            echo "message=Moderate security issues found" >> $GITHUB_OUTPUT
          else
            echo "status=clean" >> $GITHUB_OUTPUT
            echo "message=No significant security issues found" >> $GITHUB_OUTPUT
          fi
          
      - name: 📝 Create security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ steps.aggregate.outputs.status == 'clean' && '✅ Clean' || steps.aggregate.outputs.status == 'moderate' && '⚠️ Issues Found' || '🚨 Critical Issues' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message**: ${{ steps.aggregate.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Issue Breakdown" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Count | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical | ${{ steps.aggregate.outputs.critical }} | ${{ steps.aggregate.outputs.critical == '0' && '✅' || '🚨' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| High | ${{ steps.aggregate.outputs.high }} | ${{ steps.aggregate.outputs.high == '0' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Moderate | ${{ steps.aggregate.outputs.moderate }} | ${{ steps.aggregate.outputs.moderate == '0' && '✅' || 'ℹ️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST Scan | ${{ needs.sast-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Headers | ${{ needs.security-headers-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Scan | ${{ needs.license-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
      - name: 🚨 Fail on critical issues
        if: steps.aggregate.outputs.status == 'critical'
        run: |
          echo "🚨 Critical security vulnerabilities detected!"
          echo "Failing the security scan workflow."
          exit 1