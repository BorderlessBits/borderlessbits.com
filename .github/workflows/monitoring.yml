name: üîç Monitoring & Health Checks

on:
  schedule:
    # Every 5 minutes during business hours (9 AM - 6 PM UTC, Mon-Fri)
    - cron: '*/5 9-18 * * 1-5'
    # Every 15 minutes outside business hours
    - cron: '*/15 0-8,19-23 * * 1-5'
    - cron: '*/15 * * * 0,6'
  workflow_dispatch:
    inputs:
      full_check:
        description: 'Run full monitoring suite'
        required: false
        default: false
        type: boolean

env:
  MONITORING_TIMEOUT: 30

jobs:
  # ==========================================
  # UPTIME & AVAILABILITY MONITORING
  # ==========================================

  uptime-check:
    name: üü¢ Uptime Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        endpoint:
          - name: 'Production Home'
            url: 'https://borderlessbits.com'
            expected_status: 200
            critical: true
          - name: 'Production Contact'
            url: 'https://borderlessbits.com/contact'
            expected_status: 200
            critical: true
          - name: 'Staging Site'
            url: 'https://staging.borderlessbits.com'
            expected_status: 200
            critical: false
          - name: 'Backup Site'
            url: 'https://backup.borderlessbits.com'
            expected_status: 200
            critical: false

    outputs:
      status: ${{ steps.check.outputs.status }}
      response_time: ${{ steps.check.outputs.response_time }}

    steps:
      - name: üîç Health check - ${{ matrix.endpoint.name }}
        id: check
        run: |
          echo "Checking ${{ matrix.endpoint.url }}..."

          # Perform health check with timeout and retries
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}:%{time_total}" \
            --max-time ${{ env.MONITORING_TIMEOUT }} \
            --retry 3 \
            --retry-delay 5 \
            "${{ matrix.endpoint.url }}" || echo "000:0.0")

          STATUS_CODE=$(echo "$RESPONSE" | cut -d: -f1)
          RESPONSE_TIME=$(echo "$RESPONSE" | cut -d: -f2)

          echo "status=$STATUS_CODE" >> $GITHUB_OUTPUT
          echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT

          if [ "$STATUS_CODE" = "${{ matrix.endpoint.expected_status }}" ]; then
            echo "‚úÖ ${{ matrix.endpoint.name }}: OK ($RESPONSE_TIME s)"
            echo "healthy=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå ${{ matrix.endpoint.name }}: FAILED (Status: $STATUS_CODE, Time: $RESPONSE_TIME s)"
            echo "healthy=false" >> $GITHUB_OUTPUT
            
            if [ "${{ matrix.endpoint.critical }}" = "true" ]; then
              exit 1
            fi
          fi

  # ==========================================
  # PERFORMANCE MONITORING
  # ==========================================

  performance-check:
    name: ‚ö° Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.full_check == 'true' || github.event_name == 'schedule'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üì¶ Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: üì¶ Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: üí° Run Lighthouse audit
        id: lighthouse
        run: |
          # Create monitoring-specific Lighthouse config
          cat > lighthouserc.monitor.json << EOF
          {
            "ci": {
              "collect": {
                "url": [
                  "https://borderlessbits.com",
                  "https://borderlessbits.com/contact"
                ],
                "numberOfRuns": 1
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.80}],
                  "categories:accessibility": ["warn", {"minScore": 0.95}],
                  "categories:best-practices": ["warn", {"minScore": 0.90}],
                  "categories:seo": ["warn", {"minScore": 0.95}],
                  "first-contentful-paint": ["warn", {"maxNumericValue": 2000}],
                  "largest-contentful-paint": ["warn", {"maxNumericValue": 2500}],
                  "cumulative-layout-shift": ["warn", {"maxNumericValue": 0.1}]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF

          lhci autorun --config=lighthouserc.monitor.json || true

      - name: üìä Performance summary
        run: |
          echo "## ‚ö° Performance Monitoring Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Pages Tested**: Home, Contact" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Type**: Automated monitoring" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # SSL/TLS CERTIFICATE MONITORING
  # ==========================================

  ssl-check:
    name: üîí SSL Certificate Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    strategy:
      fail-fast: false
      matrix:
        domain:
          - 'borderlessbits.com'
          - 'www.borderlessbits.com'
          - 'staging.borderlessbits.com'
          - 'backup.borderlessbits.com'

    steps:
      - name: üîí Check SSL certificate - ${{ matrix.domain }}
        id: ssl_check
        run: |
          echo "Checking SSL certificate for ${{ matrix.domain }}..."

          # Get certificate expiration date
          CERT_INFO=$(echo | openssl s_client -servername ${{ matrix.domain }} -connect ${{ matrix.domain }}:443 2>/dev/null | openssl x509 -noout -dates 2>/dev/null || echo "FAILED")

          if [ "$CERT_INFO" = "FAILED" ]; then
            echo "‚ùå Failed to retrieve SSL certificate for ${{ matrix.domain }}"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Extract expiration date
          EXPIRY_DATE=$(echo "$CERT_INFO" | grep "notAfter" | cut -d= -f2)
          EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s 2>/dev/null || date -j -f "%b %d %H:%M:%S %Y %Z" "$EXPIRY_DATE" +%s 2>/dev/null || echo "0")
          CURRENT_TIMESTAMP=$(date +%s)
          DAYS_UNTIL_EXPIRY=$(( (EXPIRY_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 ))

          echo "status=valid" >> $GITHUB_OUTPUT
          echo "expiry_date=$EXPIRY_DATE" >> $GITHUB_OUTPUT
          echo "days_until_expiry=$DAYS_UNTIL_EXPIRY" >> $GITHUB_OUTPUT

          if [ $DAYS_UNTIL_EXPIRY -lt 30 ]; then
            echo "‚ö†Ô∏è SSL certificate for ${{ matrix.domain }} expires in $DAYS_UNTIL_EXPIRY days"
            echo "urgency=high" >> $GITHUB_OUTPUT
          elif [ $DAYS_UNTIL_EXPIRY -lt 60 ]; then
            echo "‚ö†Ô∏è SSL certificate for ${{ matrix.domain }} expires in $DAYS_UNTIL_EXPIRY days"
            echo "urgency=medium" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ SSL certificate for ${{ matrix.domain }} is valid ($DAYS_UNTIL_EXPIRY days remaining)"
            echo "urgency=low" >> $GITHUB_OUTPUT
          fi

  # ==========================================
  # DNS MONITORING
  # ==========================================

  dns-check:
    name: üåê DNS Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.inputs.full_check == 'true' || github.event_name == 'schedule'

    steps:
      - name: üåê DNS resolution check
        run: |
          echo "## üåê DNS Resolution Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          DOMAINS=("borderlessbits.com" "www.borderlessbits.com" "staging.borderlessbits.com")

          for domain in "${DOMAINS[@]}"; do
            echo "Checking DNS for $domain..."
            
            # Check A record
            A_RECORD=$(dig +short A $domain | head -n1)
            if [ -n "$A_RECORD" ]; then
              echo "‚úÖ A record for $domain: $A_RECORD"
              echo "- $domain ‚Üí $A_RECORD" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå No A record found for $domain"
              echo "- $domain ‚Üí ‚ùå No A record" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Check AAAA record
            AAAA_RECORD=$(dig +short AAAA $domain | head -n1)
            if [ -n "$AAAA_RECORD" ]; then
              echo "‚úÖ AAAA record for $domain: $AAAA_RECORD"
            fi
          done

  # ==========================================
  # SECURITY MONITORING
  # ==========================================

  security-headers-check:
    name: üõ°Ô∏è Security Headers Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üõ°Ô∏è Check security headers
        run: |
          echo "Checking security headers..."

          URLS=(
            "https://borderlessbits.com"
            "https://borderlessbits.com/contact"
          )

          for url in "${URLS[@]}"; do
            echo "Checking headers for $url..."
            
            HEADERS=$(curl -I -s --max-time 30 "$url" || echo "FAILED")
            
            if [ "$HEADERS" = "FAILED" ]; then
              echo "‚ùå Failed to retrieve headers for $url"
              continue
            fi
            
            # Check critical security headers
            CHECKS=(
              "X-Frame-Options"
              "X-XSS-Protection"
              "X-Content-Type-Options"
              "Content-Security-Policy"
              "Referrer-Policy"
            )
            
            echo "Security headers check for $url:"
            for header in "${CHECKS[@]}"; do
              if echo "$HEADERS" | grep -qi "$header"; then
                echo "‚úÖ $header: Present"
              else
                echo "‚ùå $header: Missing"
              fi
            done
            echo ""
          done

  # ==========================================
  # DEPENDENCY MONITORING
  # ==========================================

  dependency-check:
    name: üì¶ Dependency Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.full_check == 'true' || github.event_name == 'schedule'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚ö° Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: üîç Security audit
        run: |
          echo "Running security audit..."
          AUDIT_RESULT=$(npm audit --audit-level moderate --json || true)

          # Parse audit results
          if echo "$AUDIT_RESULT" | jq -e '.vulnerabilities' > /dev/null 2>&1; then
            CRITICAL=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.critical // 0')
            HIGH=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.high // 0')
            MODERATE=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.moderate // 0')
            LOW=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.low // 0')
            
            echo "## üì¶ Security Audit Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Critical**: $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "- **High**: $HIGH" >> $GITHUB_STEP_SUMMARY
            echo "- **Moderate**: $MODERATE" >> $GITHUB_STEP_SUMMARY
            echo "- **Low**: $LOW" >> $GITHUB_STEP_SUMMARY
            
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "‚ö†Ô∏è Critical or high severity vulnerabilities found!"
              echo "critical_vulns=true" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ No critical or high severity vulnerabilities found"
              echo "critical_vulns=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚úÖ No vulnerabilities found"
            echo "critical_vulns=false" >> $GITHUB_OUTPUT
          fi

      - name: üìä Check for outdated packages
        run: |
          echo "Checking for outdated packages..."
          OUTDATED=$(npm outdated --json || echo '{}')

          if [ "$OUTDATED" != '{}' ]; then
            echo "‚ö†Ô∏è Outdated packages found"
            echo "$OUTDATED" | jq -r 'keys[]' | head -10
          else
            echo "‚úÖ All packages are up to date"
          fi

  # ==========================================
  # NOTIFICATION & ALERTING
  # ==========================================

  alert-handler:
    name: üö® Alert Handler
    runs-on: ubuntu-latest
    needs: [uptime-check, ssl-check, dependency-check]
    if: always()

    steps:
      - name: üìä Collect monitoring results
        id: collect
        run: |
          # Collect results from all monitoring jobs
          echo "Collecting monitoring results..."

          # Default to healthy status
          OVERALL_HEALTH="healthy"
          ALERTS=()

          # Check uptime results
          if [ "${{ needs.uptime-check.result }}" != "success" ]; then
            OVERALL_HEALTH="unhealthy"
            ALERTS+=("Critical services are down")
          fi

          # Check SSL certificate results  
          if [ "${{ needs.ssl-check.result }}" != "success" ]; then
            OVERALL_HEALTH="warning"
            ALERTS+=("SSL certificate issues detected")
          fi

          # Check dependency results
          if [ "${{ needs.dependency-check.outputs.critical_vulns }}" = "true" ]; then
            OVERALL_HEALTH="warning"
            ALERTS+=("Critical security vulnerabilities found")
          fi

          echo "overall_health=$OVERALL_HEALTH" >> $GITHUB_OUTPUT
          echo "alerts=${ALERTS[*]}" >> $GITHUB_OUTPUT

      - name: üü¢ Healthy status
        if: steps.collect.outputs.overall_health == 'healthy'
        run: |
          echo "‚úÖ All monitoring checks passed"
          echo "System is operating normally"

      - name: ‚ö†Ô∏è Warning status
        if: steps.collect.outputs.overall_health == 'warning'
        run: |
          echo "‚ö†Ô∏è Monitoring warnings detected:"
          echo "${{ steps.collect.outputs.alerts }}"

          # Here you would typically send notifications
          # Example: Slack webhook, email, etc.

      - name: üö® Critical status
        if: steps.collect.outputs.overall_health == 'unhealthy'
        run: |
          echo "üö® CRITICAL: System issues detected"
          echo "${{ steps.collect.outputs.alerts }}"

          # Here you would send critical alerts
          # Example: PagerDuty, SMS, phone calls, etc.

          exit 1

      - name: üìà Update monitoring dashboard
        run: |
          echo "## üîç Monitoring Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.collect.outputs.overall_health == 'healthy' && 'üü¢ Healthy' || steps.collect.outputs.overall_health == 'warning' && '‚ö†Ô∏è Warning' || 'üö® Critical' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Last Check**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Uptime Check**: ${{ needs.uptime-check.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }}" >> $GITHUB_STEP_SUMMARY
          echo "**SSL Check**: ${{ needs.ssl-check.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dependencies**: ${{ needs.dependency-check.outputs.critical_vulns != 'true' && '‚úÖ Secure' || '‚ö†Ô∏è Vulnerabilities' }}" >> $GITHUB_STEP_SUMMARY
