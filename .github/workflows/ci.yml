name: 🚀 Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    # Daily security and dependency checks at 3 AM UTC
    - cron: '0 3 * * *'

# Prevent concurrent runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  NEXT_CACHE_SIZE_LIMIT: 100
  HUSKY: 0
  CI: true

jobs:
  # ==========================================
  # QUALITY GATES - Parallel execution for speed
  # ==========================================

  quality-gates:
    name: 🔍 Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        check: [lint, type-check, format-check]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 ESLint
        if: matrix.check == 'lint'
        run: npm run lint

      - name: 📝 TypeScript check
        if: matrix.check == 'type-check'
        run: npm run type-check

      - name: 🎨 Format check
        if: matrix.check == 'format-check'
        run: npm run format:check

  # ==========================================
  # SECURITY AUDIT
  # ==========================================

  security-audit:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 NPM Audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'

  # ==========================================
  # DEPENDENCY VULNERABILITY SCAN
  # ==========================================

  dependency-scan:
    name: 📦 Dependency Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==========================================
  # UNIT & INTEGRATION TESTS
  # ==========================================

  tests:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 Run tests with coverage
        run: npm run test:ci
        continue-on-error: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

  # ==========================================
  # BUILD & BUNDLE ANALYSIS
  # ==========================================

  build:
    name: 🏗️ Build & Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-gates, tests]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 📊 Bundle size analysis
        run: npm run analyze
        env:
          ANALYZE: true

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: |
            out/
            .next/
          retention-days: 7

  # ==========================================
  # LIGHTHOUSE PERFORMANCE AUDIT
  # ==========================================

  lighthouse:
    name: 💡 Lighthouse Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}

      - name: 🖥️ Serve static files
        run: npx serve out -l 3000 &

      - name: ⏳ Wait for server
        run: |
          npm install -g wait-on
          wait-on http://localhost:3000 --timeout 60000

      - name: 💡 Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # ==========================================
  # INTEGRATION STATUS
  # ==========================================

  ci-status:
    name: ✅ CI Status
    runs-on: ubuntu-latest
    needs: [quality-gates, security-audit, dependency-scan, tests, build]
    if: always()

    steps:
      - name: ✅ All checks passed
        if: ${{ needs.quality-gates.result == 'success' && needs.security-audit.result == 'success' && needs.dependency-scan.result == 'success' && needs.tests.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Quality gates: PASSED"
          echo "🛡️ Security audit: PASSED"
          echo "📦 Dependency scan: PASSED"
          echo "🧪 Tests: PASSED"
          echo "🏗️ Build: PASSED"

      - name: ❌ Some checks failed
        if: ${{ needs.quality-gates.result != 'success' || needs.security-audit.result != 'success' || needs.dependency-scan.result != 'success' || needs.tests.result != 'success' || needs.build.result != 'success' }}
        run: |
          echo "❌ Some CI checks failed"
          echo "Quality gates: ${{ needs.quality-gates.result }}"
          echo "Security audit: ${{ needs.security-audit.result }}"
          echo "Dependency scan: ${{ needs.dependency-scan.result }}"
          echo "Tests: ${{ needs.tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          exit 1

  # ==========================================
  # CACHE MANAGEMENT
  # ==========================================

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [ci-status]
    if: always() && github.event_name == 'schedule'

    steps:
      - name: 🗑️ Clear npm cache
        run: npm cache clean --force

      - name: 📦 Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
              const daysSinceCreated = (Date.now() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
              return daysSinceCreated > 7;
            });

            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
